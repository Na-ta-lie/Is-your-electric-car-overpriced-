setwd("C:/Users/Natal/Documents/NYCDSA_Projects/Is-your-electric-car-overpriced-")
summary(model)
model <- readRDS("model.rds")
setwd("C:/Users/Natal/Documents/NYCDSA_Projects/Is-your-electric-car-overpriced-/Initial_work")
library(ggpubr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(car)
library(MASS)
library(repr)
library(pals)
library(ggpubr)
library(plotly)
ecars_raw = read.csv('EV_cars.csv')
ecars_raw = ecars_raw %>% rename(Price = Price.DE., Acceleration = acceleration..0.100.)
make = strsplit(ecars_raw$Car_name, split = ' ')
make_ = c()
n = length(make)
for (i in 1:n) {
make_[i] = make[[i]][1]
}
ecars_raw$Make = make_
ecars_raw = ecars_raw %>% relocate(Make, .before = Car_name_link)
ecars_raw = ecars_raw %>% relocate(Battery, .after = Car_name_link)
ecars_raw = ecars_raw %>% filter(!is.na(Fast_charge))
ecars = ecars_raw %>% filter(!is.na(Price))
ecars_missing_price = ecars_raw %>% filter(is.na(Price))
ecars
ecars_missing_price
ecars_raw = read.csv('EV_cars.csv')
ecars_raw = ecars_raw %>% rename(Price = Price.DE., Acceleration = acceleration..0.100.)
make = strsplit(ecars_raw$Car_name, split = ' ')
make_ = c()
n = length(make)
for (i in 1:n) {
make_[i] = make[[i]][1]
}
ecars_raw$Make = make_
ecars_raw = ecars_raw %>% relocate(Make, .before = Car_name_link)
ecars_raw = ecars_raw %>% relocate(Battery, .after = Car_name_link)
ecars_raw = ecars_raw %>% filter(!is.na(Fast_charge))
ecars = ecars_raw %>% filter(!is.na(Price))
ecars_missing_price = ecars_raw %>% filter(is.na(Price))
ecars
ecars_missing_price
ecars_raw = read.csv('EV_cars.csv')
ecars_raw = ecars_raw %>% rename(Price = Price.DE., Acceleration = acceleration..0.100.)
make = strsplit(ecars_raw$Car_name, split = ' ')
make_ = c()
n = length(make)
for (i in 1:n) {
make_[i] = make[[i]][1]
}
ecars_raw$Make = make_
ecars_raw = ecars_raw %>% relocate(Make, .before = Car_name_link)
ecars_raw = ecars_raw %>% relocate(Battery, .after = Car_name_link)
ecars_raw = ecars_raw %>% filter(!is.na(Fast_charge))
ecars = ecars_raw %>% filter(!is.na(Price))
ecars_missing_price = ecars_raw %>% filter(is.na(Price))
ecars
ecars_missing_price
plot(ecars[,4:10],
main = 'Comparison of all Quantitive Features')
top_10 = ecars %>% group_by(Make) %>%
filter(n() >= 10)
top_10
make_colors = c('#e6194b', '#f58231',  '#ffe119',
'#bcf60c','#3cb44b', '#008080',
'#aaffc3', '#4363d8', '#000075',
'#46f0f0', '#911eb4', '#e6beff',
'#f032e6', '#fabebe')
make_colors2 = c('#e6194b', '#f58231',  '#ffe119',
'#bcf60c','#3cb44b', '#008080',
'#aaffc3', '#4363d8', '#000075',
'#46f0f0', '#911eb4', '#e6beff',
'#f032e6', '#fabebe', 'black')
makes = top_10$Make
ecars$Make2 = ifelse(ecars$Make %in% makes, ecars$Make, "zOther")
ecars
make_other = unique(ecars$Make2)
make_other = sort(make_other)
make_other[15] = 'Other'
make_other
ggplot(ecars, aes(x = Battery, y = Price, text = Car_name)) +
geom_point(aes(col = Make2)) +
scale_color_manual(name = "Make", values = make_colors2, labels = make_other)+
xlab("Battery Capacity (kWh)") +
ylab("Price in Germany (euros) ") +
ggtitle('Electric Vehicle Battery vs. Price (Makes with 10+ Models Highlighted)') +
theme(legend.position = "bottom")
test = ggplot(ecars, aes(x = Battery, y = Price, text = Car_name)) +
geom_point(aes(col = Make2)) +
scale_color_manual(name = "Make", values = make_colors2, labels = make_other)+
xlab("Battery Capacity (kWh)") +
ylab("Price in Germany (euros) ") +
ggtitle('Electric Vehicle Battery vs. Price (Makes with 10+ Models Highlighted)') +
theme(legend.position = "none")
test
ggplotly(test, tooltip = c("x", 'y', "text"))
ggplot(ecars, aes(x = Battery, y = Range)) +
geom_point(aes(col = Make2)) +
scale_color_manual(name = "Make", values = make_colors2, labels = make_other)+
xlab("Battery Capacity (kWh)") +
ylab("Range (km on one charge) ") +
ggtitle('Electric Vehicle Battery vs. Range (Makes with 10+ Models Highlighted)') +
theme(legend.position = "bottom")
price_model_empty = lm(Price ~ 1, data = ecars)
price_model_full= lm(Price ~ Battery + Efficiency + Fast_charge + Range + Top_speed + Acceleration, data = ecars)
summary(price_model_full)
scope = list(lower = formula(price_model_empty), upper = formula(price_model_full))
forwardAIC = step(price_model_empty, scope, direction = 'forward', k = 2)
price_model_initial = lm(Price ~ Efficiency + Fast_charge + Range + Top_speed + Acceleration, data = ecars)
summary(price_model_initial)
plot(price_model_initial)
bc = boxCox(price_model_initial)
lambda = bc$x[which(bc$y == max(bc$y))]
ecars$Price_lambda = (ecars$Price^lambda - 1)/lambda
price_model = lm(Price_lambda ~ Efficiency + Fast_charge + Range + Top_speed + Acceleration, data = ecars)
summary(price_model)
plot(price_model)
broom::glance(price_model)
prediction = predict(price_model, ecars, interval = 'prediction')
confidence = predict(price_model, ecars, interval = 'confidence')
prediction_dollars = ((prediction * lambda) + 1)^(1/lambda)
confidence_dollars = ((confidence * lambda) + 1)^(1/lambda)
predicted_price = data.frame(Name = ecars$Car_name,
Make = ecars$Make,
Make2 = ecars$Make2,
Price = ecars$Price/1000,
Predicted = (prediction_dollars[,1]/1000),
Predict_lwr = (prediction_dollars[,2]/1000),
Predict_upr = (prediction_dollars[,3]/1000),
Confidence_lwr = (confidence_dollars[,2]/1000),
Confidence_upr = (confidence_dollars[,3]/1000))
predicted_price
summary(price_model)
